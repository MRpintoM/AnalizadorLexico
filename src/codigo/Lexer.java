/* The following code was generated by JFlex 1.4.3 on 1/03/22 22:51 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/03/22 22:51 from the specification file
 * <tt>C:/Users/pinto/OneDrive/Documentos/NetBeansProjects/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\41\2\0\1\3\22\0\1\3\1\50\4\0\1\46"+
    "\1\0\1\54\1\55\1\45\1\43\1\7\1\44\1\5\1\40\12\2"+
    "\1\0\1\4\1\52\1\42\1\53\2\0\32\1\3\0\1\51\1\1"+
    "\1\0\1\17\1\20\1\22\1\30\1\14\1\13\1\33\1\26\1\10"+
    "\1\1\1\24\1\15\1\31\1\11\1\23\1\34\1\1\1\21\1\16"+
    "\1\12\1\27\1\35\1\36\1\32\1\25\1\37\1\6\1\47\1\6"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\1\1\2\1\5"+
    "\20\3\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\2\4\0\1\3"+
    "\1\22\35\3\1\22\6\3\1\5\1\23\1\24\1\25"+
    "\1\26\1\0\1\4\1\27\1\3\1\22\44\3\1\0"+
    "\1\27\27\3\1\4\4\3\2\22\42\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\56\0\u047e\0\56\0\56\0\56\0\56\0\56"+
    "\0\u04ac\0\56\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0"+
    "\0\u0114\0\u05ee\0\134\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\56\0\56\0\56\0\56\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec"+
    "\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c"+
    "\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\56\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u0ebc\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30"+
    "\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\5\3\1\24\2\3\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\7\57\0\2\3\5\0\30\3\20\0\1\4\2\0"+
    "\1\46\53\0\1\5\3\0\1\5\52\0\1\6\52\0"+
    "\1\47\1\50\3\0\2\51\30\47\14\0\2\51\1\0"+
    "\1\47\1\50\1\5\2\0\1\51\1\10\30\47\14\0"+
    "\2\51\1\0\2\3\5\0\1\3\1\52\1\3\1\53"+
    "\15\3\1\54\6\3\17\0\2\3\5\0\4\3\1\55"+
    "\2\3\1\56\7\3\1\57\10\3\17\0\2\3\5\0"+
    "\11\3\1\60\4\3\1\61\11\3\17\0\2\3\5\0"+
    "\1\62\4\3\1\63\1\3\1\64\3\3\1\65\14\3"+
    "\17\0\2\3\5\0\1\3\1\66\3\3\1\67\14\3"+
    "\1\70\5\3\17\0\2\3\5\0\13\3\1\71\14\3"+
    "\17\0\2\3\5\0\2\3\1\72\12\3\1\73\1\74"+
    "\1\75\6\3\1\76\1\3\17\0\2\3\5\0\6\3"+
    "\1\77\1\3\1\100\17\3\17\0\2\3\5\0\11\3"+
    "\1\101\1\3\1\102\1\3\1\103\12\3\17\0\2\3"+
    "\5\0\4\3\1\104\23\3\17\0\2\3\5\0\5\3"+
    "\1\105\1\3\1\106\3\3\1\107\14\3\17\0\2\3"+
    "\5\0\4\3\1\110\6\3\1\111\14\3\17\0\2\3"+
    "\5\0\13\3\1\112\14\3\17\0\2\3\5\0\7\3"+
    "\1\113\1\3\1\114\5\3\1\115\10\3\17\0\2\3"+
    "\5\0\13\3\1\116\14\3\17\0\2\3\5\0\16\3"+
    "\1\117\11\3\56\0\1\120\57\0\1\121\55\0\1\122"+
    "\55\0\1\123\55\0\1\124\14\0\1\47\1\50\3\0"+
    "\2\51\30\47\4\0\1\125\7\0\2\51\2\0\1\126"+
    "\2\0\1\46\51\0\1\47\4\0\2\127\30\47\14\0"+
    "\2\127\2\0\1\50\3\0\2\127\44\0\2\127\1\0"+
    "\2\3\5\0\1\3\1\130\1\131\3\3\1\132\21\3"+
    "\17\0\2\3\5\0\24\3\1\133\3\3\17\0\2\3"+
    "\5\0\26\3\1\53\1\3\17\0\2\3\5\0\2\3"+
    "\1\134\25\3\17\0\2\3\5\0\5\3\1\135\22\3"+
    "\17\0\2\3\5\0\7\3\1\136\5\3\1\53\1\3"+
    "\1\137\10\3\17\0\2\3\5\0\1\140\10\3\1\141"+
    "\16\3\17\0\2\3\5\0\1\3\1\142\26\3\17\0"+
    "\2\3\5\0\13\3\1\143\14\3\17\0\2\3\5\0"+
    "\5\3\1\67\22\3\17\0\2\3\5\0\11\3\1\53"+
    "\16\3\17\0\2\3\5\0\17\3\1\144\10\3\17\0"+
    "\2\3\5\0\6\3\1\137\21\3\17\0\2\3\5\0"+
    "\2\3\1\145\25\3\17\0\2\3\5\0\1\3\1\146"+
    "\26\3\17\0\2\3\5\0\7\3\1\147\1\3\1\150"+
    "\16\3\17\0\2\3\5\0\1\3\1\151\26\3\17\0"+
    "\2\3\5\0\13\3\1\152\14\3\17\0\2\3\5\0"+
    "\24\3\1\130\3\3\17\0\2\3\5\0\1\153\27\3"+
    "\17\0\2\3\5\0\6\3\1\154\21\3\17\0\2\3"+
    "\5\0\6\3\1\155\21\3\17\0\2\3\5\0\4\3"+
    "\1\156\23\3\17\0\2\3\5\0\13\3\1\157\14\3"+
    "\17\0\2\3\5\0\2\3\1\137\25\3\17\0\2\3"+
    "\5\0\2\3\1\160\25\3\17\0\2\3\5\0\7\3"+
    "\1\161\20\3\17\0\2\3\5\0\2\3\1\162\3\3"+
    "\1\137\21\3\17\0\2\3\5\0\1\3\1\163\26\3"+
    "\17\0\2\3\5\0\3\3\1\164\24\3\17\0\2\3"+
    "\5\0\17\3\1\165\10\3\17\0\2\3\5\0\2\3"+
    "\1\166\25\3\17\0\2\3\5\0\12\3\1\167\15\3"+
    "\17\0\2\3\5\0\1\170\12\3\1\171\14\3\17\0"+
    "\2\3\5\0\10\3\1\172\17\3\17\0\2\3\5\0"+
    "\1\173\4\3\1\174\22\3\17\0\2\3\5\0\1\175"+
    "\27\3\16\0\41\120\1\0\14\120\2\0\1\176\55\0"+
    "\1\126\61\0\2\177\44\0\2\177\1\0\2\3\5\0"+
    "\4\3\1\65\23\3\17\0\2\3\5\0\4\3\1\200"+
    "\23\3\17\0\2\3\5\0\2\3\1\201\25\3\17\0"+
    "\2\3\5\0\5\3\1\202\5\3\1\152\14\3\17\0"+
    "\2\3\5\0\1\203\27\3\17\0\2\3\5\0\5\3"+
    "\1\53\22\3\17\0\2\3\5\0\1\3\1\204\26\3"+
    "\17\0\2\3\5\0\4\3\1\53\23\3\17\0\2\3"+
    "\5\0\6\3\1\53\21\3\17\0\2\3\5\0\13\3"+
    "\1\205\14\3\17\0\2\3\5\0\7\3\1\206\20\3"+
    "\17\0\2\3\5\0\7\3\1\207\20\3\17\0\2\3"+
    "\5\0\21\3\1\53\6\3\17\0\2\3\5\0\4\3"+
    "\1\210\23\3\17\0\2\3\5\0\23\3\1\53\4\3"+
    "\17\0\2\3\5\0\2\3\1\211\25\3\17\0\2\3"+
    "\5\0\1\212\27\3\17\0\2\3\5\0\12\3\1\213"+
    "\15\3\17\0\2\3\5\0\11\3\1\207\16\3\17\0"+
    "\2\3\5\0\2\3\1\162\25\3\17\0\2\3\5\0"+
    "\4\3\1\152\23\3\17\0\2\3\5\0\2\3\1\214"+
    "\25\3\17\0\2\3\5\0\7\3\1\215\20\3\17\0"+
    "\2\3\5\0\5\3\1\216\22\3\17\0\2\3\5\0"+
    "\17\3\1\217\10\3\17\0\2\3\5\0\6\3\1\140"+
    "\21\3\17\0\2\3\5\0\12\3\1\220\15\3\17\0"+
    "\2\3\5\0\2\3\1\221\3\3\1\207\21\3\17\0"+
    "\2\3\5\0\7\3\1\222\20\3\17\0\2\3\5\0"+
    "\10\3\1\175\17\3\17\0\2\3\5\0\13\3\1\53"+
    "\14\3\17\0\2\3\5\0\14\3\1\223\13\3\17\0"+
    "\2\3\5\0\25\3\1\224\2\3\17\0\2\3\5\0"+
    "\2\3\1\225\25\3\17\0\2\3\5\0\5\3\1\211"+
    "\22\3\17\0\2\3\5\0\20\3\1\53\7\3\17\0"+
    "\2\3\5\0\7\3\1\226\20\3\17\0\2\3\5\0"+
    "\5\3\1\137\22\3\20\0\1\176\52\0\1\227\1\0"+
    "\1\47\1\50\3\0\2\177\30\47\14\0\2\177\1\0"+
    "\2\3\5\0\11\3\1\230\16\3\17\0\2\3\5\0"+
    "\7\3\1\231\20\3\17\0\2\3\5\0\4\3\1\232"+
    "\23\3\17\0\2\3\5\0\25\3\1\137\2\3\17\0"+
    "\2\3\5\0\6\3\1\233\21\3\17\0\2\3\5\0"+
    "\26\3\1\234\1\3\17\0\2\3\5\0\5\3\1\235"+
    "\22\3\17\0\2\3\5\0\2\3\1\53\25\3\17\0"+
    "\2\3\5\0\1\3\1\236\26\3\17\0\2\3\5\0"+
    "\1\237\27\3\17\0\2\3\5\0\1\3\1\240\26\3"+
    "\17\0\2\3\5\0\16\3\1\241\11\3\17\0\2\3"+
    "\5\0\11\3\1\242\16\3\17\0\2\3\5\0\14\3"+
    "\1\53\13\3\17\0\2\3\5\0\4\3\1\243\23\3"+
    "\17\0\2\3\5\0\11\3\1\244\16\3\17\0\2\3"+
    "\5\0\16\3\1\53\11\3\17\0\2\3\5\0\1\245"+
    "\27\3\17\0\2\3\5\0\17\3\1\246\10\3\17\0"+
    "\2\3\5\0\7\3\1\247\20\3\17\0\2\3\5\0"+
    "\7\3\1\103\20\3\17\0\2\3\5\0\4\3\1\250"+
    "\23\3\17\0\2\3\5\0\2\3\1\117\25\3\17\0"+
    "\2\3\5\0\3\3\1\251\24\3\17\0\2\3\5\0"+
    "\1\3\1\252\26\3\17\0\2\3\5\0\21\3\1\253"+
    "\6\3\17\0\2\3\5\0\1\254\27\3\17\0\2\3"+
    "\5\0\5\3\1\255\22\3\17\0\2\3\5\0\20\3"+
    "\1\140\7\3\17\0\2\3\5\0\12\3\1\53\15\3"+
    "\17\0\2\3\5\0\12\3\1\256\10\3\1\53\4\3"+
    "\17\0\2\3\5\0\11\3\1\257\16\3\17\0\2\3"+
    "\5\0\7\3\1\260\20\3\17\0\2\3\5\0\7\3"+
    "\1\244\20\3\17\0\2\3\5\0\1\3\1\53\26\3"+
    "\17\0\2\3\5\0\1\3\1\261\26\3\17\0\2\3"+
    "\5\0\5\3\1\207\22\3\17\0\2\3\5\0\23\3"+
    "\1\137\4\3\17\0\2\3\5\0\12\3\1\262\15\3"+
    "\17\0\2\3\5\0\7\3\1\263\20\3\17\0\2\3"+
    "\5\0\12\3\1\264\15\3\17\0\2\3\5\0\4\3"+
    "\1\265\23\3\17\0\2\3\5\0\4\3\1\266\23\3"+
    "\17\0\2\3\5\0\15\3\1\53\12\3\17\0\2\3"+
    "\5\0\2\3\1\267\25\3\17\0\2\3\5\0\13\3"+
    "\1\270\14\3\17\0\2\3\5\0\12\3\1\207\15\3"+
    "\17\0\2\3\5\0\17\3\1\137\10\3\17\0\2\3"+
    "\5\0\2\3\1\271\25\3\17\0\2\3\5\0\12\3"+
    "\1\137\15\3\17\0\2\3\5\0\4\3\1\272\23\3"+
    "\17\0\2\3\5\0\1\3\1\273\26\3\17\0\2\3"+
    "\5\0\1\3\1\207\26\3\17\0\2\3\5\0\3\3"+
    "\1\274\24\3\17\0\2\3\5\0\1\3\1\275\26\3"+
    "\17\0\2\3\5\0\4\3\1\173\23\3\17\0\2\3"+
    "\5\0\13\3\1\276\14\3\17\0\2\3\5\0\2\3"+
    "\1\140\25\3\17\0\2\3\5\0\24\3\1\53\3\3"+
    "\17\0\2\3\5\0\1\277\27\3\17\0\2\3\5\0"+
    "\3\3\1\53\24\3\17\0\2\3\5\0\27\3\1\271"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\27\1\1\11\1\1\5\11\1\1\1\11"+
    "\3\1\4\0\47\1\4\11\1\0\50\1\1\0\30\1"+
    "\1\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { lexeme=yytext(); return NOT;
          }
        case 24: break;
        case 13: 
          { lexeme=yytext(); return OR;
          }
        case 25: break;
        case 21: 
          { lexeme=yytext(); return Me_Igual;
          }
        case 26: break;
        case 12: 
          { lexeme=yytext(); return AND;
          }
        case 27: break;
        case 1: 
          { lexeme=yytext(); return Delimitador;
          }
        case 28: break;
        case 23: 
          { lexeme=yytext(); return Agrupacion;
          }
        case 29: break;
        case 19: 
          { lexeme=yytext(); return Comparacion;
          }
        case 30: break;
        case 9: 
          { lexeme=yytext(); return Suma;
          }
        case 31: break;
        case 6: 
          { lexeme=yytext(); return Division;
          }
        case 32: break;
        case 7: 
          { return Linea;
          }
        case 33: break;
        case 18: 
          { lexeme=yytext(); return Reservada;
          }
        case 34: break;
        case 22: 
          { lexeme=yytext(); return Ma_Igual;
          }
        case 35: break;
        case 8: 
          { lexeme=yytext(); return Igual;
          }
        case 36: break;
        case 16: 
          { lexeme=yytext(); return Menor;
          }
        case 37: break;
        case 20: 
          { lexeme=yytext(); return Distinto;
          }
        case 38: break;
        case 4: 
          { lexeme=yytext(); return Numero;
          }
        case 39: break;
        case 3: 
          { lexeme=yytext(); return Identificador;
          }
        case 40: break;
        case 11: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 41: break;
        case 2: 
          { return ERROR;
          }
        case 42: break;
        case 17: 
          { lexeme=yytext(); return Mayor;
          }
        case 43: break;
        case 15: 
          { lexeme=yytext(); return XOR;
          }
        case 44: break;
        case 5: 
          { /*Ignore*/
          }
        case 45: break;
        case 10: 
          { lexeme=yytext(); return Resta;
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
